{"ast":null,"code":"/*\r\n * Copyright 2018-2023 adorsys GmbH & Co KG\r\n *\r\n * This program is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU Affero General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or (at\r\n * your option) any later version. This program is distributed in the hope that\r\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program. If not, see https://www.gnu.org/licenses/.\r\n *\r\n * This project is also available under a separate commercial license. You can\r\n * contact us at psd2@adorsys.com.\r\n */\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.tppBackend}`;\n    }\n    listUsers(page = 0, size = 25, queryParam = '') {\n      return this.http.get(`${this.url}/users?page=${page}&size=${size}&queryParam=${queryParam}`).pipe(map(resp => {\n        return {\n          users: resp.content,\n          totalElements: resp.totalElements\n        };\n      }));\n    }\n    getUser(userId) {\n      return this.http.get(this.url + '/users/' + userId);\n    }\n    createUser(user) {\n      return this.http.post(this.url + '/users', user);\n    }\n    updateUserDetails(user) {\n      return this.http.put(this.url + '/users', user);\n    }\n    blockTpp(userId) {\n      return this.http.post(`${this.url}/users/status?userId=${userId}`, userId);\n    }\n    deleteUser(userId) {\n      return this.http.delete(`${this.url}/user/${userId}`);\n    }\n    resetPasswordViaEmail(login) {\n      return this.http.post(`${this.url}'/users/reset/password/` + login, null);\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}