{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CountryService = /*#__PURE__*/(() => {\n  class CountryService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.tppBackend}`;\n      this.countries = new BehaviorSubject(null);\n      this.currentCountries = this.countries.asObservable();\n    }\n    getCountryCodes() {\n      return this.http.get(this.url + '/codes');\n    }\n    getCountryByTppId(countries, tppId) {\n      if (countries && tppId) {\n        return countries[tppId.slice(0, 2)];\n      }\n      return '';\n    }\n    loadCountries() {\n      this.getCountryCodes().toPromise().then(data => {\n        this.countries.next(data);\n      });\n    }\n    getCountryList() {\n      return this.currentCountries.pipe(map(data => {\n        if (data != null) {\n          const countries = [];\n          Object.keys(data).forEach(countryKey => {\n            countries.push({\n              code: countryKey,\n              name: data[countryKey]\n            });\n          });\n          return countries;\n        }\n      }));\n    }\n    static #_ = this.ɵfac = function CountryService_Factory(t) {\n      return new (t || CountryService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CountryService,\n      factory: CountryService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CountryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}