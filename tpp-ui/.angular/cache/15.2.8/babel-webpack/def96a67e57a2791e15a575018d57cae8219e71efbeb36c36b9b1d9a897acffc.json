{"ast":null,"code":"/*\r\n * Copyright 2018-2023 adorsys GmbH & Co KG\r\n *\r\n * This program is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU Affero General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or (at\r\n * your option) any later version. This program is distributed in the hope that\r\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program. If not, see https://www.gnu.org/licenses/.\r\n *\r\n * This project is also available under a separate commercial license. You can\r\n * contact us at psd2@adorsys.com.\r\n */\nimport { ElementRef, SimpleChanges } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { take } from 'rxjs/operators';\nimport { IconRegistry } from './icon-registry';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./icon-registry\";\nimport * as i2 from \"@angular/platform-browser\";\nconst _c0 = [\"*\"];\nexport let IconComponent = /*#__PURE__*/(() => {\n  class IconComponent {\n    constructor(_elementRef, _iconRegistry, _sanitizer) {\n      this._elementRef = _elementRef;\n      this._iconRegistry = _iconRegistry;\n      this._sanitizer = _sanitizer;\n      /**\r\n       * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n       * the element the icon is contained in.\r\n       */\n      this.inline = false;\n      const icons = ['user', 'account', 'upload', 'euro', 'add', 'generate_test_data', 'settings'];\n      icons.forEach(val => {\n        _iconRegistry.addSvgIcon(val, _sanitizer.bypassSecurityTrustResourceUrl('assets/icons/' + val + '.svg'));\n      });\n    }\n    _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n      const parts = iconName.split(':');\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n        case 2:\n          return parts;\n        default:\n          throw Error(`Invalid icon name: \"${iconName}\"`);\n      }\n    }\n    ngOnChanges(changes) {\n      // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n      if (changes['svgIcon']) {\n        if (this.svgIcon) {\n          const [namespace, iconName] = this._splitIconName(this.svgIcon);\n          this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), err => console.error(`Error retrieving icon: ${err.message}`));\n        } else {\n          this._clearSvgElement();\n        }\n      }\n    }\n    _setSvgElement(svg) {\n      this._clearSvgElement();\n      // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n      // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n      // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n      const styleTags = svg.querySelectorAll('style');\n      for (let i = 0; i < styleTags.length; i++) {\n        styleTags[i].textContent += ' ';\n      }\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n      const layoutElement = this._elementRef.nativeElement;\n      let childCount = layoutElement.childNodes.length;\n      // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n      while (childCount--) {\n        const child = layoutElement.childNodes[childCount];\n        // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          layoutElement.removeChild(child);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function IconComponent_Factory(t) {\n      return new (t || IconComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.IconRegistry), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: IconComponent,\n      selectors: [[\"app-icon\"]],\n      hostAttrs: [1, \"app-icon\"],\n      hostVars: 2,\n      hostBindings: function IconComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"app-icon--inline\", ctx.inline);\n        }\n      },\n      inputs: {\n        inline: \"inline\",\n        svgIcon: \"svgIcon\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function IconComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      styles: [\"/*!\\n * Copyright 2018-2023 adorsys GmbH & Co KG\\n *\\n * This program is free software: you can redistribute it and/or modify it\\n * under the terms of the GNU Affero General Public License as published\\n * by the Free Software Foundation, either version 3 of the License, or (at\\n * your option) any later version. This program is distributed in the hope that\\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n * See the GNU Affero General Public License for more details.\\n *\\n * You should have received a copy of the GNU Affero General Public License\\n * along with this program. If not, see https://www.gnu.org/licenses/.\\n *\\n * This project is also available under a separate commercial license. You can\\n * contact us at psd2@adorsys.com.\\n */.app-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.app-icon--inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return IconComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}