{"ast":null,"code":"/*\r\n * Copyright 2018-2023 adorsys GmbH & Co KG\r\n *\r\n * This program is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU Affero General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or (at\r\n * your option) any later version. This program is distributed in the hope that\r\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program. If not, see https://www.gnu.org/licenses/.\r\n *\r\n * This project is also available under a separate commercial license. You can\r\n * contact us at psd2@adorsys.com.\r\n */\nimport { Injector, NgZone } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { InfoService } from '../commons/info/info.service';\nimport * as i0 from \"@angular/core\";\nexport let GlobalErrorsHandler = /*#__PURE__*/(() => {\n  class GlobalErrorsHandler {\n    constructor(zone, injector) {\n      this.zone = zone;\n      this.injector = injector;\n    }\n    get router() {\n      return this.injector.get(Router);\n    }\n    get infoService() {\n      return this.injector.get(InfoService);\n    }\n    get activatedRoute() {\n      return this.injector.get(ActivatedRoute);\n    }\n    handleError(errorObj) {\n      console.error('TPP UI error handler: ', errorObj);\n      if (errorObj instanceof HttpErrorResponse) {\n        this.zone.run(() => {\n          const error = errorObj.error;\n          const errorMessage = error ? error.message : error.statusText;\n          this.infoService.openFeedback(errorMessage, {\n            severity: 'error'\n          });\n        });\n      } else {\n        this.zone.run(() => {\n          const errorMessage = errorObj.message;\n          // TODO: next line ignore the error if it's beacause of unresolved promise. It should be removed when the issue #1145 is fixed\n          if (!errorMessage.includes('Uncaught (in promise)')) {\n            this.infoService.openFeedback(errorMessage, {\n              severity: 'info'\n            });\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function GlobalErrorsHandler_Factory(t) {\n      return new (t || GlobalErrorsHandler)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GlobalErrorsHandler,\n      factory: GlobalErrorsHandler.ɵfac\n    });\n  }\n  return GlobalErrorsHandler;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}