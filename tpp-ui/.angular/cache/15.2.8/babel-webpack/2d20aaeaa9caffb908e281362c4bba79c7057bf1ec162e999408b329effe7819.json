{"ast":null,"code":"/*\r\n * Copyright 2018-2023 adorsys GmbH & Co KG\r\n *\r\n * This program is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU Affero General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or (at\r\n * your option) any later version. This program is distributed in the hope that\r\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program. If not, see https://www.gnu.org/licenses/.\r\n *\r\n * This project is also available under a separate commercial license. You can\r\n * contact us at psd2@adorsys.com.\r\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { HttpClient } from '@angular/common/http';\nimport cssVars from 'css-vars-ponyfill';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CustomizeService = /*#__PURE__*/(() => {\n  class CustomizeService {\n    constructor(http) {\n      this.http = http;\n      this.NEW_THEME_WAS_SET = false;\n      this.STATUS_WAS_CHANGED = false;\n      this.IS_CUSTOM = false;\n      this.DEFAULT_THEME = {\n        globalSettings: {\n          logo: 'assets/UI/Logo_XS2ASandbox.png'\n        }\n      };\n      this.USER_THEME = {\n        globalSettings: {\n          logo: ''\n        }\n      };\n      this.updateCSS();\n    }\n    static removeExternalLinkElements() {\n      const linkElements = document.querySelectorAll('link[rel ~= \"icon\"]');\n      for (const linkElement of Array.from(linkElements)) {\n        linkElement.parentNode.removeChild(linkElement);\n      }\n    }\n    static removeFavicon() {\n      const linkElement = document.head.querySelector('#customize-service-injected-node');\n      if (linkElement) {\n        document.head.removeChild(linkElement);\n      }\n    }\n    getJSON() {\n      return this.http.get('../assets/UI/custom/UITheme.json').pipe(map(data => {\n        let theme = data;\n        this.IS_CUSTOM = true;\n        try {\n          JSON.parse(JSON.stringify(theme));\n          const errors = this.validateTheme(theme);\n          if (errors.length) {\n            theme = this.getDefaultTheme();\n            this.IS_CUSTOM = false;\n          }\n        } catch (e) {\n          theme = this.getDefaultTheme();\n          this.IS_CUSTOM = false;\n        }\n        return theme;\n      }), catchError(() => {\n        this.IS_CUSTOM = false;\n        return this.getDefaultTheme();\n      }));\n    }\n    isCustom() {\n      return this.IS_CUSTOM;\n    }\n    showRegister() {\n      return this.USER_THEME.globalSettings.showRegister;\n    }\n    getTheme(type) {\n      if (type) {\n        return this.DEFAULT_THEME;\n      } else {\n        return this.USER_THEME;\n      }\n    }\n    getDefaultTheme() {\n      return this.http.get('../assets/UI/defaultTheme.json').toPromise().then(data => {\n        return data;\n      });\n    }\n    setUserTheme(theme) {\n      this.USER_THEME = theme;\n      this.updateCSS(this.USER_THEME.globalSettings.cssVariables);\n      if (this.isCustom) {\n        CustomizeService.removeExternalLinkElements();\n      }\n      if (this.USER_THEME.globalSettings.favicon) {\n        this.setFavicon(this.USER_THEME.globalSettings.favicon.type, this.USER_THEME.globalSettings.favicon.href);\n      }\n      this.NEW_THEME_WAS_SET = true;\n      this.STATUS_WAS_CHANGED = !this.STATUS_WAS_CHANGED;\n    }\n    getLogo() {\n      if (this.NEW_THEME_WAS_SET) {\n        return this.USER_THEME.globalSettings.logo;\n      } else {\n        return this.DEFAULT_THEME.globalSettings.logo;\n      }\n    }\n    getTitle() {\n      if (this.NEW_THEME_WAS_SET) {\n        return this.USER_THEME.globalSettings.title;\n      } else {\n        return this.DEFAULT_THEME.globalSettings.title;\n      }\n    }\n    validateTheme(theme) {\n      const general = ['globalSettings'];\n      const additional = [['logo']];\n      const errors = [];\n      for (let i = 0; i < general.length; i++) {\n        if (!theme.hasOwnProperty(general[i])) {\n          errors.push(`Missing field ${general[i]}!`);\n        } else if (i !== 2) {\n          for (const property of additional[i]) {\n            if (!theme[general[i]].hasOwnProperty(property)) {\n              errors.push(`Field ${general[i]} missing property ${property}!`);\n            }\n          }\n        } else {\n          for (const office of theme.officesInfo) {\n            for (const property of additional[i]) {\n              if (!office.hasOwnProperty(property)) {\n                errors.push(`Field ${general[i]} missing property ${property}!`);\n              }\n            }\n          }\n        }\n      }\n      return errors;\n    }\n    addFavicon(type, href) {\n      const linkElement = document.createElement('link');\n      linkElement.setAttribute('id', 'customize-service-injected-node');\n      linkElement.setAttribute('rel', 'icon');\n      linkElement.setAttribute('type', type);\n      linkElement.setAttribute('href', href);\n      document.head.appendChild(linkElement);\n    }\n    setFavicon(type, href) {\n      CustomizeService.removeFavicon();\n      this.addFavicon(type, href);\n    }\n    updateCSS(variables = {}) {\n      // Use css-vars-ponyfill to polyfill css-variables for legacy browser\n      cssVars({\n        include: 'style',\n        onlyLegacy: true,\n        watch: true,\n        variables\n      });\n      // If you decide to drop ie11, edge < 14 support in future, use this as implementation to set variables\n      // Object.keys(variables).forEach(variableName => {\n      //   document.documentElement.style.setProperty('--' + variableName, variables[variableName]);\n      // });\n    }\n    static #_ = this.ɵfac = function CustomizeService_Factory(t) {\n      return new (t || CustomizeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CustomizeService,\n      factory: CustomizeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CustomizeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}