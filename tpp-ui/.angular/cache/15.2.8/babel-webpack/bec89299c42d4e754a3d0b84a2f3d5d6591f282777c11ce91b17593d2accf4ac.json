{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport 'rxjs-compat/add/observable/of';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PiisConsentService = /*#__PURE__*/(() => {\n  class PiisConsentService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.tppBackend}/piis-consents`;\n    }\n    getPiisConsent(consentId, userLogin) {\n      console.log(this.url + '/' + consentId + '?userLogin=' + userLogin);\n      return this.http.get(this.url + '/' + consentId + '?userLogin=' + userLogin);\n    }\n    getPiisConsents(userLogin) {\n      return this.http.get(this.url + '?userLogin=' + userLogin);\n    }\n    createPiisConsent(piisConsent, userLogin, password) {\n      console.log(this.url + '?userLogin=' + userLogin + '&password=' + password);\n      return this.http.post(this.url + '?userLogin=' + userLogin + '&password=' + password, piisConsent);\n    }\n    // @PutMapping(\"/{consentId}/terminate\")\n    putPiiSConsent(piisConsent) {\n      return this.http.put(this.url + '/' + piisConsent.consentId + '/terminate', piisConsent);\n    }\n    static #_ = this.ɵfac = function PiisConsentService_Factory(t) {\n      return new (t || PiisConsentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PiisConsentService,\n      factory: PiisConsentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PiisConsentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}