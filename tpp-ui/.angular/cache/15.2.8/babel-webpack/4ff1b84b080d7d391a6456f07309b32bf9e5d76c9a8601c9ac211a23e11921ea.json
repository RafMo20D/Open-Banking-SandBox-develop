{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TppManagementService = /*#__PURE__*/(() => {\n  class TppManagementService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.tppBackend}`;\n      this.staffRole = 'STAFF';\n      this.customerRole = 'CUSTOMER';\n    }\n    changePin(tppId, newPin) {\n      return this.http.put(`${this.url}/admin/password?tppId=${tppId}&pin=${newPin}`, null);\n    }\n    blockUser(userId) {\n      return this.http.post(`${this.url}/admin/status?userId=${userId}`, userId);\n    }\n    blockAccount(accountId) {\n      return this.http.post(`${this.url}/accounts/status?accountId=${accountId}`, accountId);\n    }\n    deleteTpp(tppId) {\n      return this.http.delete(`${this.url}/admin?tppId=${tppId}`);\n    }\n    deleteUser(userId) {\n      return this.http.delete(`${this.url}/user/${userId}`);\n    }\n    deleteAccount(accountId) {\n      return this.http.delete(this.url + `/account/${accountId}`);\n    }\n    updateUserDetails(user, tppId) {\n      return this.http.put(this.url + `/admin/users?tppId=${tppId}`, user);\n    }\n    createUser(user, tppId) {\n      return this.http.post(this.url + `/admin/register?tppId=${tppId}`, user);\n    }\n    createAdmin(user) {\n      return this.http.post(this.url + `/admin/register/admin`, user);\n    }\n    deleteSelf() {\n      return this.http.delete(this.url + '/self');\n    }\n    deleteTestData() {\n      return this.http.delete(this.url + '/admin/test/data');\n    }\n    deleteAccountTransactions(accountId) {\n      return this.http.delete(this.url + '/transactions/' + accountId);\n    }\n    updateAccountAccessForUser(accountAccess) {\n      return this.http.put(this.url + '/accounts/access', accountAccess);\n    }\n    getUsersForTpp(tppId) {\n      return this.getAllUsers(0, 100, {\n        tppId: tppId\n      }).pipe(map(resp => {\n        return resp.users;\n      }));\n    }\n    getTppById(tppId) {\n      return this.getTpps(0, 1, {\n        tppId: tppId\n      }).pipe(map(data => {\n        if (data && data.tpps && data.tpps.length > 0) {\n          return data.tpps[0];\n        } else {\n          return undefined;\n        }\n      }));\n    }\n    getTpps(page, size, queryParams) {\n      return this.getData(page, size, this.staffRole, false, queryParams).pipe(map(resp => {\n        return {\n          tpps: resp.content,\n          totalElements: resp.totalElements\n        };\n      }));\n    }\n    getAllUsers(page, size, queryParams) {\n      return this.getData(page, size, this.customerRole, false, queryParams).pipe(map(resp => {\n        return {\n          users: resp.content,\n          totalElements: resp.totalElements\n        };\n      }));\n    }\n    getAllAccounts(page, size, queryParams) {\n      return this.getData(page, size, this.customerRole, true, queryParams).pipe(map(resp => {\n        return {\n          accounts: resp.content,\n          totalElements: resp.totalElements\n        };\n      }));\n    }\n    getData(page, size, role, accounts, queryParams) {\n      let params = new HttpParams();\n      params = params.set('page', page.toLocaleString());\n      params = params.set('size', size.toLocaleString());\n      params = params.set('role', role);\n      if (queryParams) {\n        if (queryParams.userLogin) {\n          params = params.set('userLogin', queryParams.userLogin);\n        }\n        if (queryParams.tppId) {\n          params = params.set('tppId', queryParams.tppId);\n        }\n        if (queryParams.ibanParam) {\n          params = params.set('ibanParam', queryParams.ibanParam);\n        }\n        if (queryParams.country) {\n          params = params.set('country', queryParams.country);\n        }\n        if (queryParams.tppLogin) {\n          params = params.set('tppLogin', queryParams.tppLogin);\n        }\n        if (queryParams.blocked) {\n          params = params.set('blocked', JSON.stringify(queryParams.blocked));\n        }\n        if (queryParams.blocked === false) {\n          params = params.set('blocked', JSON.stringify(queryParams.blocked));\n        }\n      }\n      const endpoint = accounts ? 'account' : 'users';\n      return this.http.get(`${this.url}/admin/${endpoint}`, {\n        params: params\n      });\n    }\n    getAdminById(id, size) {\n      return this.getAllAdmins(0, size).pipe(map(data => {\n        if (data.users) {\n          return data.users.find(u => u.id === id);\n        }\n        return undefined;\n      }));\n    }\n    getAllAdmins(number, size) {\n      let params = new HttpParams();\n      params = params.set('page', number.toLocaleString());\n      params = params.set('size', size.toLocaleString());\n      return this.http.get(`${this.url}/admin/admins`, {\n        params: params\n      }).pipe(map(resp => {\n        return {\n          users: resp.content,\n          totalElements: resp.totalElements\n        };\n      }));\n    }\n    static #_ = this.ɵfac = function TppManagementService_Factory(t) {\n      return new (t || TppManagementService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TppManagementService,\n      factory: TppManagementService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TppManagementService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}