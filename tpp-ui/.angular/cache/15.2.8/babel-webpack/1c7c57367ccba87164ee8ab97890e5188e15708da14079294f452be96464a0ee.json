{"ast":null,"code":"import { UntypedFormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { TppUserService } from '../../services/tpp.user.service';\nimport { TppManagementService } from '../../services/tpp-management.service';\nimport { ADMIN_KEY } from '../../commons/constant/constant';\nimport { InfoService } from '../../commons/info/info.service';\nimport { Location } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"../../services/tpp.user.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../../services/tpp-management.service\";\nimport * as i6 from \"../../commons/info/info.service\";\nimport * as i7 from \"@angular/common\";\nfunction UserProfileUpdateComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UserProfileUpdateComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Email is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UserProfileUpdateComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Email is invalid \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport let UserProfileUpdateComponent = /*#__PURE__*/(() => {\n  class UserProfileUpdateComponent {\n    constructor(authService, userInfoService, formBuilder, route, tppManagementService, infoService, location) {\n      this.authService = authService;\n      this.userInfoService = userInfoService;\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.tppManagementService = tppManagementService;\n      this.infoService = infoService;\n      this.location = location;\n      this.unsubscribe$ = new Subject();\n    }\n    ngOnInit() {\n      this.admin = sessionStorage.getItem(ADMIN_KEY);\n      this.getCurrentUserLogin();\n      this.setupEditUserFormControl();\n      this.getUserDetails();\n      this.setUpTppOrAdmin();\n    }\n    ngOnDestroy() {\n      this.unsubscribe$.next();\n      this.unsubscribe$.complete();\n    }\n    get formControl() {\n      return this.userForm.controls;\n    }\n    getUserDetails() {\n      if (this.authService.isLoggedIn()) {\n        this.userInfoService.getUserInfo().pipe(takeUntil(this.unsubscribe$)).subscribe(user => {\n          this.user = user;\n          this.admin = user.userRoles.includes('SYSTEM') ? 'true' : 'false';\n          this.userForm.patchValue({\n            email: this.user.email,\n            username: this.user.login\n            // pin: this.user.pin,\n          });\n        });\n      }\n    }\n\n    setupEditUserFormControl() {\n      this.userForm = this.formBuilder.group({\n        username: ['', Validators.required],\n        email: ['', [Validators.email, Validators.required]]\n        // pin: ['', [Validators.minLength(5), Validators.required]],\n      });\n    }\n\n    onSubmit() {\n      if (this.userForm.invalid || this.admin === undefined) {\n        return;\n      }\n      const updatedUser = {\n        ...this.user,\n        branchLogin: undefined,\n        email: this.userForm.get('email').value,\n        login: this.userForm.get('username').value\n      };\n      let restCall;\n      if (this.admin === 'true') {\n        restCall = this.tppManagementService.updateUserDetails(updatedUser, this.tppId);\n      } else {\n        restCall = this.userInfoService.updateUserInfo(updatedUser);\n      }\n      restCall.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {\n        this.getUserDetails();\n        this.location.back();\n        this.infoService.openFeedback('The information has been successfully updated');\n        if (this.currentLogin === this.user.login) {\n          this.authService.logout();\n        }\n      });\n    }\n    getCurrentUserLogin() {\n      this.userInfoService.currentTppUser.pipe(takeUntil(this.unsubscribe$)).subscribe(user => {\n        this.currentLogin = user.login;\n      });\n    }\n    getUserInfoForAdmin(tppId, adminSize) {\n      const restCall = adminSize ? this.tppManagementService.getAdminById(tppId, adminSize) : this.tppManagementService.getTppById(tppId);\n      restCall.pipe(takeUntil(this.unsubscribe$)).subscribe(user => {\n        if (user) {\n          this.user = user;\n          this.userForm.patchValue({\n            email: this.user.email,\n            username: this.user.login\n          });\n        }\n      });\n    }\n    setUpTppOrAdmin() {\n      this.tppId = this.route.snapshot.params['id'];\n      if (this.admin === 'true') {\n        this.route.queryParams.subscribe(params => {\n          this.getUserInfoForAdmin(this.tppId, params['admin']);\n        });\n      }\n    }\n    resetPasswordViaEmail(login) {\n      this.userInfoService.resetPasswordViaEmail(login).subscribe(() => {\n        this.infoService.openFeedback('Link for password reset was sent, check email.', {\n          severity: 'info'\n        });\n      });\n    }\n    static #_ = this.ɵfac = function UserProfileUpdateComponent_Factory(t) {\n      return new (t || UserProfileUpdateComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.TppUserService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i5.TppManagementService), i0.ɵɵdirectiveInject(i6.InfoService), i0.ɵɵdirectiveInject(i7.Location));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UserProfileUpdateComponent,\n      selectors: [[\"app-user-profile-update\"]],\n      decls: 25,\n      vars: 11,\n      consts: [[1, \"container-fluid\"], [1, \"header__title\", \"mb-4\"], [1, \"card\", \"card--small\"], [1, \"card-body--large\"], [\"novalidate\", \"\", \"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\"], [\"for\", \"username\"], [\"autocomplete\", \"off\", \"id\", \"username\", \"placeholder\", \"Enter login\", \"type\", \"text\", \"formControlName\", \"username\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"email\"], [\"autocomplete\", \"off\", \"id\", \"email\", \"placeholder\", \"Enter Email\", \"type\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"d-flex\", \"justify-content-between\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"invalid-feedback\"]],\n      template: function UserProfileUpdateComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtext(2, \"Update TPP User Details\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"form\", 4);\n          i0.ɵɵlistener(\"ngSubmit\", function UserProfileUpdateComponent_Template_form_ngSubmit_5_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 7);\n          i0.ɵɵtemplate(10, UserProfileUpdateComponent_div_10_Template, 2, 0, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 9);\n          i0.ɵɵtext(13, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 10);\n          i0.ɵɵtemplate(15, UserProfileUpdateComponent_div_15_Template, 2, 0, \"div\", 8);\n          i0.ɵɵtemplate(16, UserProfileUpdateComponent_div_16_Template, 2, 0, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"div\", 5)(18, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function UserProfileUpdateComponent_Template_button_click_18_listener() {\n            return ctx.resetPasswordViaEmail(ctx.user.login);\n          });\n          i0.ɵɵtext(19, \"Send password update link\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(20, \"div\", 12)(21, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function UserProfileUpdateComponent_Template_button_click_21_listener() {\n            return ctx.location.back();\n          });\n          i0.ɵɵtext(22, \"Cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 14);\n          i0.ɵɵtext(24, \"Submit\");\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.userForm);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, (ctx.formControl[\"username\"].touched || ctx.submitted) && ctx.formControl[\"username\"].errors));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.formControl[\"username\"].touched || ctx.submitted) && ctx.formControl[\"username\"].hasError(\"required\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, (ctx.formControl[\"email\"].touched || ctx.submitted) && ctx.formControl[\"email\"].errors));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.formControl[\"email\"].touched || ctx.submitted) && ctx.formControl[\"email\"].hasError(\"required\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.formControl[\"email\"].touched || ctx.submitted) && ctx.formControl[\"email\"].hasError(\"email\"));\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"disabled\", ctx.userForm.invalid);\n        }\n      },\n      dependencies: [i7.NgClass, i7.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName]\n    });\n  }\n  return UserProfileUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}