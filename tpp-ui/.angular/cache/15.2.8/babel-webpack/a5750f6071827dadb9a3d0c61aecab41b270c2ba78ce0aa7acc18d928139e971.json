{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\nimport { AutoLogoutService } from './auto-logout.service';\nimport { ADMIN_KEY } from '../commons/constant/constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./auto-logout.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, autoLogoutService) {\n      this.http = http;\n      this.router = router;\n      this.autoLogoutService = autoLogoutService;\n      this.url = `${environment.tppBackend}`;\n      this.authTokenStorageKey = 'access_token';\n      this.jwtHelperService = new JwtHelperService();\n    }\n    authorize(credentials) {\n      return this.http.post(this.url + '/login', {}, {\n        headers: new HttpHeaders({\n          login: credentials.login,\n          pin: credentials.pin\n        }),\n        observe: 'response'\n      }).pipe(map(loginResponse => loginResponse.headers.get(this.authTokenStorageKey)));\n    }\n    isLoggedIn() {\n      const authorizationToken = this.getAuthorizationToken();\n      if (authorizationToken && authorizationToken !== 'null' && authorizationToken !== null) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    logout() {\n      this.autoLogoutService.resetMonitoringConfig();\n      sessionStorage.clear();\n      this.router.navigate(['/logout']);\n    }\n    getAuthorizationToken() {\n      return sessionStorage.getItem(this.authTokenStorageKey);\n    }\n    register(tppInfo, countryCode) {\n      if (countryCode !== undefined && countryCode !== null) {\n        tppInfo.id = countryCode + '_' + tppInfo.id;\n        return this.http.post(this.url + '/register', tppInfo);\n      }\n    }\n    requestCodeForResetPassword(credentials) {\n      return this.http.post(this.url + '/password', credentials);\n    }\n    changePassword(credentials) {\n      return this.http.put(this.url + '/password', credentials);\n    }\n    getTppIdStructure(countryCode) {\n      return this.http.get(this.url + '/country/codes/structure', {\n        params: new HttpParams().set('countryCode', countryCode)\n      });\n    }\n    setAuthorisationToken(token) {\n      sessionStorage.setItem(this.authTokenStorageKey, token);\n      this.setUsersAccessRights(this.jwtHelperService.decodeToken(token));\n    }\n    setUsersAccessRights(loginResponse) {\n      let admin = false;\n      if (loginResponse != null && loginResponse['realm_access']['roles'].includes('SYSTEM')) {\n        admin = true;\n      }\n      sessionStorage.setItem(ADMIN_KEY, admin ? 'true' : 'false');\n    }\n    login(credentials) {\n      return this.authorize(credentials).pipe(map(jwt => {\n        if (jwt === undefined || jwt == null) {\n          return false;\n        }\n        this.setAuthorisationToken(jwt);\n        return true;\n      }));\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AutoLogoutService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}