{"ast":null,"code":"import _asyncToGenerator from \"D:/Open-Banking-SandBox-develop/Open-Banking-SandBox-develop/tpp-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\r\n * Copyright 2018-2023 adorsys GmbH & Co KG\r\n *\r\n * This program is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU Affero General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or (at\r\n * your option) any later version. This program is distributed in the hope that\r\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program. If not, see https://www.gnu.org/licenses/.\r\n *\r\n * This project is also available under a separate commercial license. You can\r\n * contact us at psd2@adorsys.com.\r\n */\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { EMPTY, throwError, from } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\nimport { ERROR_MESSAGE } from '../commons/constant/constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n      this.errorText = 'Invalid password for user';\n      this.authTokenStorageKey = 'access_token';\n    }\n    intercept(request, next) {\n      return from(this.handleRequest(request, next)).pipe(tap(event => {\n        if (event instanceof HttpResponse && event.headers.has(this.authTokenStorageKey)) {\n          this.saveAccessToken(event.headers.get(this.authTokenStorageKey));\n        }\n      }), catchError(errors => {\n        if (errors instanceof HttpErrorResponse) {\n          if (errors.status === 401 && this.authService.isLoggedIn() && !errors.error?.message.match(this.errorText)) {\n            if (errors.status === 401 && errors.statusText?.match('Unauthorized')) {\n              errors.error.message = 'You have been logged out due to inactivity.';\n              this.authService.logout();\n              sessionStorage.setItem(ERROR_MESSAGE, errors.error.message);\n              return EMPTY;\n            }\n            this.authService.logout();\n          }\n        }\n        return throwError(errors);\n      }));\n    }\n    handleRequest(request, next) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.authService.isLoggedIn()) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: 'Bearer ' + _this.authService.getAuthorizationToken()\n            }\n          });\n        }\n        return next.handle(request).toPromise();\n      })();\n    }\n    saveAccessToken(jwt) {\n      if (jwt !== undefined) {\n        sessionStorage.setItem(this.authTokenStorageKey, jwt);\n      }\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}