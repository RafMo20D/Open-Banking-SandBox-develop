{"ast":null,"code":"import JSZip from 'jszip';\nimport { CertificateGenerationService } from './certificate-generation.service';\nimport { Router } from '@angular/router';\nimport { InfoService } from '../../commons/info/info.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./certificate-generation.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../commons/info/info.service\";\nexport let CertificateDownloadService = /*#__PURE__*/(() => {\n  class CertificateDownloadService {\n    constructor(certificateGenerationService, router, infoService) {\n      this.certificateGenerationService = certificateGenerationService;\n      this.router = router;\n      this.infoService = infoService;\n    }\n    static createObjectUrl(zip, window) {\n      return window.URL.createObjectURL(zip);\n    }\n    static generateZipFile(certBlob, keyBlob) {\n      const zip = new JSZip();\n      zip.file('certificate.pem', certBlob);\n      zip.file('private.key', keyBlob);\n      return zip.generateAsync({\n        type: 'blob'\n      });\n    }\n    static downloadFile(url) {\n      const element = document.createElement('a');\n      element.setAttribute('href', url);\n      element.setAttribute('download', 'tpp_cert.zip');\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    }\n    generateAndDownloadCertificate(certificate, message) {\n      if (certificate) {\n        this.certificateGenerationService.generate(certificate).subscribe(data => {\n          if (data) {\n            const encodedCert = data.encodedCert;\n            const privateKey = data.privateKey;\n            this.createZipUrl(encodedCert, privateKey).then(url => {\n              this.navigateAndGiveFeedback({\n                message: message,\n                url: url\n              });\n            });\n          } else {\n            this.infoService.openFeedback('No certificate was generated, try again.');\n          }\n        }, error => {\n          this.infoService.openFeedback(error.error.message);\n        });\n      }\n    }\n    createZipUrl(encodedCert, privateKey) {\n      const blobCert = new Blob([encodedCert], {\n        type: 'text/plain'\n      });\n      const blobKey = new Blob([privateKey], {\n        type: 'text/plain'\n      });\n      return CertificateDownloadService.generateZipFile(blobCert, blobKey).then(zip => {\n        return CertificateDownloadService.createObjectUrl(zip, window);\n      });\n    }\n    navigateAndGiveFeedback(options) {\n      this.infoService.openFeedback(options.message);\n      setTimeout(() => CertificateDownloadService.downloadFile(options.url), 2000);\n      if (options.navigateUrl) {\n        this.router.navigate([options.navigateUrl]);\n      }\n    }\n    static #_ = this.ɵfac = function CertificateDownloadService_Factory(t) {\n      return new (t || CertificateDownloadService)(i0.ɵɵinject(i1.CertificateGenerationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.InfoService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CertificateDownloadService,\n      factory: CertificateDownloadService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CertificateDownloadService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}