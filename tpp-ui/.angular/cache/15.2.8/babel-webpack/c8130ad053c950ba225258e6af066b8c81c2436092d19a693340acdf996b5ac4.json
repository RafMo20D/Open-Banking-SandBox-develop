{"ast":null,"code":"/*\r\n * Copyright 2018-2023 adorsys GmbH & Co KG\r\n *\r\n * This program is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU Affero General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or (at\r\n * your option) any later version. This program is distributed in the hope that\r\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program. If not, see https://www.gnu.org/licenses/.\r\n *\r\n * This project is also available under a separate commercial license. You can\r\n * contact us at psd2@adorsys.com.\r\n */\nimport { HttpClient } from '@angular/common/http';\nimport { FileUploader } from 'ng2-file-upload';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let UploadService = /*#__PURE__*/(() => {\n  class UploadService {\n    constructor(http, auth) {\n      this.http = http;\n      this.auth = auth;\n    }\n    createInstanceFileUploader(options) {\n      // Set the current user credentials in Headers for Basic Authorization\n      const headers = [];\n      const header = {\n        name: 'Authorization',\n        value: 'Bearer '.concat(this.auth.getAuthorizationToken())\n      };\n      headers.push(header);\n      return new FileUploader({\n        url: options.url,\n        method: options.method,\n        headers,\n        allowedFileType: options.allowedMimeType\n      });\n    }\n    static #_ = this.ɵfac = function UploadService_Factory(t) {\n      return new (t || UploadService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UploadService,\n      factory: UploadService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UploadService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}