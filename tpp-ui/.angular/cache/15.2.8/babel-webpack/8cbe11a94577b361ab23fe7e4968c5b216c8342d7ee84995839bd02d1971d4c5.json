{"ast":null,"code":"/*\r\n * Copyright 2018-2023 adorsys GmbH & Co KG\r\n *\r\n * This program is free software: you can redistribute it and/or modify it\r\n * under the terms of the GNU Affero General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or (at\r\n * your option) any later version. This program is distributed in the hope that\r\n * it will be useful, but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * See the GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program. If not, see https://www.gnu.org/licenses/.\r\n *\r\n * This project is also available under a separate commercial license. You can\r\n * contact us at psd2@adorsys.com.\r\n */\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.tppBackend}`;\n    }\n    getAccounts(page = 0, size = 25, queryParam = '') {\n      return this.http.get(`${this.url}/accounts/page?page=${page}&size=${size}&queryParam=${queryParam}&withBalance=true`).pipe(map(resp => {\n        return {\n          accounts: resp.content,\n          totalElements: resp.totalElements\n        };\n      }));\n    }\n    getAccount(id) {\n      return this.http.get(this.url + '/accounts/' + id);\n    }\n    getAccountReport(id) {\n      return this.http.get(this.url + '/accounts/report/' + id);\n    }\n    createAccount(userId, account) {\n      return this.http.post(this.url + '/accounts', account, {\n        params: {\n          userId: userId\n        }\n      });\n    }\n    depositCash(accountId, amount) {\n      return this.http.post(this.url + '/accounts/' + accountId + '/deposit-cash', amount);\n    }\n    updateAccountAccessForUser(accountAccess) {\n      return this.http.put(this.url + '/accounts/access', accountAccess);\n    }\n    getCurrencies() {\n      return this.http.get(this.url + '/currencies');\n    }\n    blockAccount(accountId) {\n      return this.http.post(this.url + `/accounts/status?accountId=${accountId}`, accountId);\n    }\n    deleteAccount(accountId) {\n      return this.http.delete(this.url + `/account/${accountId}`);\n    }\n    setCreditLimit(accountId, creditLimit) {\n      return this.http.put(this.url + '/accounts/credit', creditLimit, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        params: {\n          accountId: accountId\n        }\n      });\n    }\n    static #_ = this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}